@page "/projects"
@inject IDialogService _dialogService
@inject ProjectManager _projectManager
@inject NavigationManager _navigationManager
@inject PlatformUtils _platformUtils
@inject IDataService _dataService

<ToolBar>
    <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               Color="Color.Primary"
               @onclick="CreateProject">
        New project
    </MudButton>
    <PickFolderButton OnFolderPicked="ChangeWorkspace"/>
</ToolBar>


<MudDataGrid T="WritingProject" MultiSelection="true" Items="@_projectManager.Projects" Breakpoint="Breakpoint.None"
             QuickFilter="@QuickFilter" Hover="true" Filterable="false"
              RowClick="@RowClicked" @bind-SelectedItems="_selectedProjects">
    <ToolBarContent>
        <MudStack Row="true" AlignItems="AlignItems.End" Class="flex-grow-1">
            <MudButton Variant="Variant.Outlined"
                       StartIcon="@Icons.Material.Filled.Delete"
                       @onclick="DeleteProjects">
                Delete selected
            </MudButton>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" />
        </MudStack>
       
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Name"/>
        @if (!_platformUtils.IsMobile())
        {
            <PropertyColumn Property="x => x.Type" />
            <PropertyColumn Property="x => x.CreationDate" Title="Creation date">
                <CellTemplate>
                    @context.Item.CreationDate.ToString("d")
                </CellTemplate>
            </PropertyColumn>
        }
        <TemplateColumn Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary"
                               @onclick="() => OpenProject(context.Item)">
                        Open project
                    </MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        <SelectColumn T="WritingProject" />
    </Columns>
    @*<PagerContent>
        <MudDataGridPager T="WritingProject" />
    </PagerContent>*@
</MudDataGrid>








@code {
    private string? _searchString;
    private HashSet<WritingProject> _selectedProjects = new();

    private void CreateProject()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        _dialogService.Show<CreateProjectDialog>("New project", options);
    }

    private Task ChangeWorkspace(string newWorkspace)
    {
        UserSettings newSettings = new(_dataService.UserSettings)
        {
            Workspace = newWorkspace
        };
        return _dataService.SaveUserSettingsAsync(newSettings);
    }

    private bool QuickFilter(WritingProject p)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            return true;
        }

        if (p.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }


    void RowClicked(DataGridRowClickEventArgs<WritingProject> args)
    {
        var doubleClick = args.MouseEventArgs.Detail == 2;
        if (doubleClick)
        {
            OpenProject(args.Item);
        }
    }

    private void OpenProject(WritingProject project)
    {
        _projectManager.SelectedProject = project;
        _navigationManager.NavigateTo("/current-project");
    }

    private async Task DeleteProjects()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete selected projects?");
        parameters.Add("ConfirmText", "Delete");
        parameters.Add("ConfirmColor", Color.Error);

        var options = new DialogOptions() { CloseButton = true};

        var dialog = await _dialogService.ShowAsync<ConfirmDialog>("Delete selected", parameters, options);
        var result = await dialog.Result;

        if(!result.Canceled)
        {
            @foreach (var project in _selectedProjects)
            {
                _projectManager.Projects.Remove(project);
            }
        }
    }
}
