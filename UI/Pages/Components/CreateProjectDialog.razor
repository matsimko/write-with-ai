@inject ProjectManager _projectManager
@inject NavigationManager _navigationManager

<MudDialog>
    <DialogContent>
        <EditForm id="create-project-form" Model=_projectData OnValidSubmit="CreateProject">
            <DataAnnotationsValidator />
            <MudTextField Label="Name"
                          @bind-Value=_projectData.Name For="@(() => _projectData.Name)" />
            <MudSelect @bind-Value=_projectData.Type Label="Type" AnchorOrigin="Origin.BottomCenter">
                @foreach (var type in ProjectTypes.All)
                {
                    <MudSelectItem Value="@type" />
                }
            </MudSelect>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton form="create-project-form" ButtonType="ButtonType.Submit" Color="Color.Primary">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    

}

@code {
    class ProjectData
    {
        [Required]
        public string Name { get; set; } = "";
        public string Type { get; set; } = ProjectTypes.Fiction;
    }

    ProjectData _projectData = new();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? DialogAttributes { get; set; }

    void CreateProject()
    {
        WritingProject? project = null;
        if (_projectData.Type == ProjectTypes.Fiction)
        {
            project = new FictionProject { Name = _projectData.Name };
        }
        else if (_projectData.Type == ProjectTypes.Nonfiction)
        {
            project = new NonfictionProject { Name = _projectData.Name };
        }

        if(project != null)
        {
            _projectManager.Projects.Add(project);
            _projectManager.SelectedProject = project;
            MudDialog.Close(DialogResult.Ok(true));
            _navigationManager.NavigateTo("/current-project");

        }
    }

    void Cancel() => MudDialog.Cancel();
}
